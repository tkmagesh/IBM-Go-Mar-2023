Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hour)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology:
    - No powerpoints
    - 100% hands-on 

Repository:
    - https://github.com/tkmagesh/ibm-go-mar-2023

Software Requirements:
    - Go tools (https://go.dev/dl)
        verification :
            go version
    - Visual Studio Code (https://code.visualstudio.com)
    - Go Extensions for VSCode (https://marketplace.visualstudio.com/items?itemName=golang.Go)

Paradox of Choice (Barry Schwartz)
    https://www.youtube.com/watch?v=VO6XEQIsCoM

Why Go?
    1. Simplicity
        ONLY 25 keywords
        - No access modifiers
        - No classes (only structs)
        - No inheritence (only composition)
        - No reference types (everything is a value)
        - No exceptions (only errors)
        - No "try catch finally"
        - No pointer arithmetic
        - No implicit type conversion
        - No function overloading
        - No operator overloading

    2. Lightweight
        - Close to hardware
        - No VM
        - Tooling support for cross compilation
        - Performance is equivalent to C++

    3. Concurrency
        - Lightweight Concurrency Model (Goroutines)
            Linux OS Thread - 2MB
            Goroutine - 4KB
        - Concurrency features are built in the language
            go keyword, channel data type, channel operator ( <- ), select case, range
        - APIs
            sync package
            sync/atomic package


to run a go program
    go run <file_name.go>

to create a build
    go build <file_name.go>
    go build -o <binary_name> <file_name.go>

to the get list of platforms supported for cross compilation
    go tool dist list

to get the list of all environment variables
    go env

to list specific environment variables
    go env <var_name> <var_name>
    ex: 
        go env GOOS GOARCH

To cross compile
    GOOS=<OS> GOARCH=<proc_arch> go build <file_name.go>
    ex:
        GOOS=windows GOARCH=386 go build 01-hello-world.go

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] + imaginary [float32])
    complex128 (real [float64] + imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32)(unicode code point)

Variables
    Function Scope
        CAN use :=
        CANNOT have unused variables

    Package Scope
        CANNOT use :=
        CAN have unused variables

Constructs
    if else
    switch case
    for

Functions
    - Variadic functions
    - Anonymous functions
    - Higher Order functions (functions as first class citizens)
        * Assign functions as values to variables
        * Pass functions as arguments
        * Return functions as return values

Collections
    Array
        Fixed size typed collection

    Slice
        Varying size typed collection
        
    Map
        Typed collection of key-value pairs

Modules & Package
    Module
        Any code that need to be versioned & deployed together
        Any folder that contains "go.mod" file
        module file
            - module name
                (convention : the repo path)
                ex github.com/tkmagesh77/ibm-go-mar-2023/09-modularity

            - minimum go runtime version 
            - dependencies

    Package
        Internal organization of a module
        Folders


    To create a module (go.mod)
        go mod init <module_name>

    To execute a module
        go run .

    To create a build
        go build .
        go build -o <binary_name> .

    To add 3rd party module
        go get <module_name>
        ex:
            go get github.com/fatih/color
        (Downloaded to $GOPATH/pkg folder)

    To sync the go.mod file
        go mod tidy

    To update all the dependencies
        go get -u

    To download the dependencies
        go mod download

    To localize the dependencies
        go mod vendor

    To install 3rd party command line tools (GOPATH/bin folder)
        go install <module_name>

    Other usefule commands
        go mod graph
        go mod why <module_name>

    Reference:
        https://go.dev/ref/mod

Structs
    

Interfaces
    In Go interfaces are IMPLICITLY implemented

Concurrency Programming
    Application has more than one execution path
